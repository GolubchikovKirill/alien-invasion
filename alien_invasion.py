import sysimport pygamefrom settings import Settingsfrom ship import Shipfrom bullet import Bulletclass AlienInvasion:    """Класс для управления ресурсами и поведением игры."""    def __init__(self):        """Инициализирует игру и создает игровые ресурсы."""        pygame.init()        self.clock = pygame.time.Clock()        self.settings = Settings()        # Настройки экрана (переход к полноэкранному режиму)        self.screen = pygame.display.set_mode(            (self.settings.screen_width, self.settings.screen_height), pygame.FULLSCREEN        )        pygame.display.set_caption("Alien Invasion")        self.ship = Ship(self)        self.bullets = pygame.sprite.Group()  # Группа для хранения пуль    def run_game(self):        """Запускает основной цикл игры."""        while True:            self._check_events()            self.ship.update()            self._update_bullets()            self._update_screen()            self.clock.tick(60)  # Количество кадров в секунду (60 FPS)    def _check_events(self):        """Обрабатывает нажатия клавиш и события мыши."""        for event in pygame.event.get():            if event.type == pygame.QUIT:                sys.exit()            elif event.type == pygame.KEYDOWN:                self._check_keydown_events(event)            elif event.type == pygame.KEYUP:                self._check_keyup_events(event)    def _check_keydown_events(self, event):        """Реакция на нажатие клавиш."""        if event.key == pygame.K_RIGHT or event.key == pygame.K_d:  # Движение вправо (англ и рус)            self.ship.moving_right = True        elif event.key == pygame.K_LEFT or event.key == pygame.K_a:  # Движение влево (англ и рус)            self.ship.moving_left = True        elif event.key == pygame.K_UP or event.key == pygame.K_w or event.key == pygame.K_f:  # Движение вверх            self.ship.moving_up = True        elif event.key == pygame.K_DOWN or event.key == pygame.K_s or event.key == pygame.K_y:  # Движение вниз            self.ship.moving_down = True        elif event.key == pygame.K_q:  # Выход при нажатии на Q            sys.exit()        elif event.key == pygame.K_SPACE:            self._fire_bullet()    def _check_keyup_events(self, event):        """Реакция на отпускание клавиш."""        if event.key == pygame.K_RIGHT or event.key == pygame.K_d:            self.ship.moving_right = False        elif event.key == pygame.K_LEFT or event.key == pygame.K_a:            self.ship.moving_left = False        elif event.key == pygame.K_UP or event.key == pygame.K_w or event.key == pygame.K_f:            self.ship.moving_up = False        elif event.key == pygame.K_DOWN or event.key == pygame.K_s or event.key == pygame.K_y:            self.ship.moving_down = False    def _fire_bullet(self):        """Создает новый снаряд на экране."""        if len(self.bullets) < self.settings.bullets_allowed:  # Ограничиваем количество пуль            new_bullet = Bullet(self)            self.bullets.add(new_bullet)    def _update_bullets(self):        """Обновляет положение пуль и удаляет старые."""        # Обновление всех пуль        self.bullets.update()        # Удаляем пули, которые вышли за пределы экрана        for bullet in self.bullets.copy():            if bullet.rect.bottom <= 0:                self.bullets.remove(bullet)    def _update_screen(self):        """Обновляет изображение на экране и отображает новый экран."""        self.screen.fill(self.settings.bg_color)        # Отображаем все пули        for bullet in self.bullets.sprites():            bullet.draw_bullet()        self.ship.blitme()        self.ship.draw_health_bar()  # Рисуем полоску здоровья (или сердца)        pygame.display.flip()    def reduce_health(self):        """Уменьшает количество жизней на 1."""        if self.ship.health > 0:            self.ship.health -= 1if __name__ == '__main__':    ai = AlienInvasion()    ai.run_game()